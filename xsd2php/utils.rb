# -*- coding: utf-8 -*-

##
## Copyright (C) 2010 Rafael Fernández López <ereslibre@ereslibre.es>
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

require "globals"

def file_to_string(file)
  f = File.open(file, "r")
  contents = ""
  for line in f
    contents << line
  end
  f.close
  return contents
end

def wtf(file)
  file << yield
end

def write_header(file, namespace)
  wtf(file) { """/*
 * This class has been autogenerated by xsd2php #{$VERSION}
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

""" }

  if namespace
    wtf(file) { """/**
  * Note that $_inject and $_namespace arguments have been automatically
  * added to the PHP class by xsd2php, and are not related to the information
  * you have provided through your XSD schemas.
  *
  * $_inject parameter allows you to provide random extended information to any
  * call, so it allows you to generate very versatile code.
  *
  * $_namespace parameter tells whether the namespace information should be added
  * or not. For instance, say your namespace is \"foo\", and your tag is \"bar\". A
  * generation without namespace would be something like:
  *
  * <bar>Information goes here</bar>
  *
  * While when being generated namespace aware, you would have got:
  *
  * <foo:bar>Information goes here</foo:bar>
  */

""" }
  else
    wtf(file) { """/**
  * Note that $_inject argument has been automatically added to the PHP class by
  * xsd2php, and is not related to the information you have provided through your
  * XSD schemas.
  *
  * $_inject parameter allows you to provide random extended information to any
  * call, so it allows you to generate very versatile code.
  */

""" }
  end
end
