#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

#
# Copyright (C) 2010 Rafael Fernández López <ereslibre@ereslibre.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# There are branches which are repositories, and there is also the "working copy". The "working
# copy" is just a directory whose ".hg" folder is a symbolic link to one of those repositories
# that are behaving as branches.
#
# Rocking points:
#
#     - You can work on a huge C/C++/whatever compiled project, and you don't have to start from
#       scratch the build phase.
#
#     - It's simple. Your repos still point to the remote repos they were pointing. No big deals.
#
# Maybe not-that-rocking points:
#
#     - Each time you switch branches you are actually doing `hg update` what isn't specially cheap.
#
#
# "I want my ice cream, tell me how to use it". OK, let's go with an example:
#
# mkdir myProject ; cd myProject
#
# hg init .featureFoo
# <commit stuff>
# hg init .featureBar
# <commit stuff>
#
# mkdir workingCopy ; cd workingCopy
#
# hgb featureFoo <-- switches to ".featureFoo" repository
# hg log
#
# hgb featureBar <-- switches to ".featureBar" repository
# hg log
#
# hgb featureBaz <-- clones and later switches to ".featureBaz" repository
# hg log
#

require "uri"
require "fileutils"

if ARGV.size != 1
	puts "usage: #$0 branch"
	Process.exit
end

pwd = FileUtils.pwd
repo_b = URI.split((URI.join "file://#{pwd}", ".#{ARGV[0]}").to_s)[5]

if File.exists? ".hg"
	if !File.exists? "#{repo_b}"
		`hg clone -U . #{repo_b}`
		puts "current repository cloned at #{repo_b}"
	end
	`hg update null`
	FileUtils.rm ".hg"
end

FileUtils.ln_s "#{repo_b}/.hg", "."
FileUtils.cd "#{repo_b}"
`hg update null`
FileUtils.cd pwd
`hg update`

puts "working copy now points to #{repo_b}"
